<?php\n\ndeclare(strict_types=1);\n\n// backend/api/save_settlement.php\n\nrequire_once __DIR__ . '/../bootstrap.php';\n\nheader("Content-Type: application/json");\n\n// 1. 验证请求方法和JWT\nif ($_SERVER['REQUEST_METHOD'] !== 'POST') {\n    http_response_code(405);\n    echo json_encode(['status' => 'error', 'message' => '仅允许POST方法']);\n    exit;\n}\n\n$user_id = verify_jwt_token();\nif (!$user_id) {\n    http_response_code(401);\n    echo json_encode(['status' => 'error', 'message' => '认证失败']);\n    exit;\n}\n\n// 2. 获取并验证输入数据\n$data = json_decode(file_get_contents('php://input'), true);\n$email_id = filter_var($data['emailId'] ?? null, FILTER_VALIDATE_INT);\n$settlement_data = $data['settlementData'] ?? null;\n\nif (!$email_id || !is_array($settlement_data)) {\n    http_response_code(400);\n    echo json_encode(['status' => 'error', 'message' => '输入数据无效或不完整']);\n    exit;\n}\n\n// 从结算单数据中提取关键信息\n$draw_period = $settlement_data['draw_period'] ?? null;\n$customer_name = $settlement_data['customer_name'] ?? null;\n$total_amount = filter_var($settlement_data['total_amount'] ?? 0, FILTER_VALIDATE_FLOAT);\n$bets_json = json_encode($settlement_data['bets'] ?? []);\n\nif (json_last_error() !== JSON_ERROR_NONE) {\n    http_response_code(400);\n    echo json_encode(['status' => 'error', 'message' => '结算单中的投注数据格式错误']);\n    exit;\n}\n\nglobal $db_connection;\n\n// 3. 开启数据库事务\n$db_connection->begin_transaction();\n\ntry {\n    // 任务 A: 插入或更新 settlements 表\n    // 使用 ON DUPLICATE KEY UPDATE 确保同一封邮件只对应一份结算单\n    $stmt_settlement = $db_connection->prepare(\n        "INSERT INTO settlements (email_id, user_id, draw_period, customer_name, total_amount, settlement_data, status) \\n         VALUES (?, ?, ?, ?, ?, ?, 'pending_settlement') \\n         ON DUPLICATE KEY UPDATE \\n         draw_period = VALUES(draw_period), \\n         customer_name = VALUES(customer_name), \\n         total_amount = VALUES(total_amount), \\n         settlement_data = VALUES(settlement_data), \\n         status = VALUES(status) "\n    );\n    $stmt_settlement->bind_param(\"iissds\", $email_id, $user_id, $draw_period, $customer_name, $total_amount, $bets_json);\n    \n    if (!$stmt_settlement->execute()) {\n        throw new Exception(\"保存结算单失败: \" . $stmt_settlement->error);\n    }\n    $stmt_settlement->close();\n\n    // 任务 B: 更新 emails 表的状态\n    $stmt_email = $db_connection->prepare(\"UPDATE emails SET is_processed = 1 WHERE id = ? AND user_id = ?\");\n    $stmt_email->bind_param(\"ii\", $email_id, $user_id);\n\n    if (!$stmt_email->execute()) {\n        throw new Exception(\"更新邮件状态失败: \" . $stmt_email->error);\n    }\n    $stmt_email->close();\n\n    // 4. 提交事务\n    $db_connection->commit();\n\n    // 5. 成功响应\n    http_response_code(200);\n    echo json_encode(['status' => 'success', 'message' => '结算单已成功保存!']);\n\n} catch (Exception $e) {\n    // 如果任何一步失败，回滚所有操作\n    $db_connection->rollback();\n    error_log(\"Save Settlement Error: \" . $e->getMessage());\n    http_response_code(500);\n    echo json_encode(['status' => 'error', 'message' => $e->getMessage()]);\n}\n