<?php\n// backend/api/auth.php\n\nini_set(\'display_errors\', 1);\nerror_reporting(E_ALL);\n\nrequire_once __DIR__ . \'/cors_headers.php\';\nrequire_once __DIR__ . \'/../db_connection.php\';\n\nsession_start();\n\nheader(\'Content-Type: application/json\');\n\n$method = $_SERVER[\'REQUEST_METHOD\'];\n$action = $_GET[\'action\'] ?? \'\';\n\n$conn = get_db_connection(); // Get connection outside of specific action blocks\nif (!$conn) {\n    http_response_code(500);\n    echo json_encode([\'success\' => false, \'message\' => \'数据库连接失败。\']);\n    exit;\n}\n\nif ($method === \'POST\' && $action === \'register\') {\n    $data = json_decode(file_get_contents(\'php://input\'), true);\n\n    $email = $data[\'email\'] ?? null;\n    $password = $data[\'password\'] ?? null;\n\n    if (empty($email) || empty($password)) {\n        http_response_code(400);\n        echo json_encode([\'success\' => false, \'message\' => \'邮箱和密码不能为空。\']);\n        exit;\n    }\n\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        http_response_code(400);\n        echo json_encode([\'success\' => false, \'message\' => \'无效的邮箱格式。\']);\n        exit;\n    }\n\n    $hashed_password = password_hash($password, PASSWORD_DEFAULT);\n\n    $stmt = $conn->prepare(\"INSERT INTO users (email, password) VALUES (?, ?)\");\n    if (!$stmt) {\n        http_response_code(500);\n        echo json_encode([\'success\' => false, \'message\' => \'准备注册查询失败：\' . $conn->error]);\n        exit;\n    }\n    $stmt->bind_param(\"ss\", $email, $hashed_password);\n\n    if ($stmt->execute()) {\n        echo json_encode([\'success\' => true, \'message\' => \'注册成功。\']);\n    } else {\n        if ($conn->errno === 1062) {\n            http_response_code(409);\n            echo json_encode([\'success\' => false, \'message\' => \'该邮箱已被注册。\']);\n        } else {\n            http_response_code(500);\n            echo json_encode([\'success\' => false, \'message\' => \'注册失败，请稍后再试。\']);\n        }\n    }\n    $stmt->close();\n} elseif ($method === \'POST\' && $action === \'login\') {\n    $data = json_decode(file_get_contents(\'php://input\'), true);\n\n    $email = $data[\'email\'] ?? null;\n    $password = $data[\'password\'] ?? null;\n\n    if (empty($email) || empty($password)) {\n        http_response_code(400);\n        echo json_encode([\'success\' => false, \'message\' => \'邮箱和密码不能为空。\']);\n        exit;\n    }\n\n    $stmt = $conn->prepare(\"SELECT id, email, password FROM users WHERE email = ?\");\n    if (!$stmt) {\n        http_response_code(500);\n        echo json_encode([\'success\' => false, \'message\' => \'准备登录查询失败：\' . $conn->error]);\n        exit;\n    }\n    $stmt->bind_param(\"s\", $email);\n    $stmt->execute();\n    $result = $stmt->get_result();\n    $user = $result->fetch_assoc();\n    $stmt->close();\n\n    if ($user && password_verify($password, $user[\'password\'])) {\n        // Existing session handling (optional, for backward compatibility)\n        $_SESSION[\'user_id\'] = $user[\'id\'];\n        $_SESSION[\'user_email\'] = $user[\'email\'];\n\n        // --- Generate and store API token ---\n        $token = bin2hex(random_bytes(32)); // Generate a random 64-character hex token\n        $expires_at = date(\'Y-m-d H:i:s\', strtotime(\'+1 day\')); // Token valid for 1 day\n\n        // Delete any existing tokens for this user to ensure only one active token per user (optional)\n        $delete_stmt = $conn->prepare(\"DELETE FROM tokens WHERE user_id = ?\");\n        if ($delete_stmt) {\n            $delete_stmt->bind_param(\"i\", $user[\'id\']);\n            $delete_stmt->execute();\n            $delete_stmt->close();\n        }\n        \n        $insert_stmt = $conn->prepare(\"INSERT INTO tokens (user_id, token, expires_at) VALUES (?, ?, ?)\");\n        if ($insert_stmt) {\n            $insert_stmt->bind_param(\"iss\", $user[\'id\'], $token, $expires_at);\n            if ($insert_stmt->execute()) {\n                echo json_encode([\n                    \'success\' => true,\n                    \'message\' => \'登录成功。\',\n                    \'user\' => [\'email\' => $user[\'email\']],\n                    \'token\' => $token // Return the token to the frontend\n                ]);\n            } else {\n                http_response_code(500);\n                echo json_encode([\'success\' => false, \'message\' => \'登录失败：无法生成认证令牌。\']);\n            }\n            $insert_stmt->close();\n        } else {\n            http_response_code(500);\n            echo json_encode([\'success\' => false, \'message\' => \'登录失败：准备令牌插入失败：\' . $conn->error]);\n        }\n\n    } else {\n        http_response_code(401);\n        echo json_encode([\'success\' => false, \'message\' => \'邮箱或密码错误。\']);\n    }\n} elseif ($method === \'POST\' && $action === \'logout\') {\n    // Invalidate the token sent by the user if present, and clear session\n    $headers = getallheaders();\n    $auth_header = $headers[\'Authorization\'] ?? \'\';\n    if (preg_match(\'/Bearer\\s((.*)\\\\.(.*)\\\\.(.*))\/\', $auth_header, $matches)) {\n        $token = $matches[1];\n        $delete_stmt = $conn->prepare(\"DELETE FROM tokens WHERE token = ?\");\n        if ($delete_stmt) {\n            $delete_stmt->bind_param(\"s\", $token);\n            $delete_stmt->execute();\n            $delete_stmt->close();\n        }\n    }\n\n    session_destroy();\n    echo json_encode([\'success\' => true, \'message\' => \'登出成功。\']);\n} elseif ($method === \'GET\' && $action === \'check_session\') {\n    // This endpoint can now check for both session and token\n    $is_logged_in = false;\n    $user_email = null;\n\n    if (isset($_SESSION[\'user_id\'])) {\n        $is_logged_in = true;\n        $user_email = $_SESSION[\'user_email\'];\n    } else {\n        // Check for Authorization header (Bearer token)\n        $headers = getallheaders();\n        $auth_header = $headers[\'Authorization\'] ?? \'\';\n        if (preg_match(\'/Bearer\\s((.*)\\\\.(.*)\\\\.(.*))\/\', $auth_header, $matches)) {\n            $token_string = $matches[1];\n\n            $stmt = $conn->prepare(\"SELECT u.id, u.email FROM tokens t JOIN users u ON t.user_id = u.id WHERE t.token = ? AND t.expires_at > NOW()\");\n            if ($stmt) {\n                $stmt->bind_param(\"s\", $token_string);\n                $stmt->execute();\n                $result = $stmt->get_result();\n                $token_user = $result->fetch_assoc();\n                $stmt->close();\n\n                if ($token_user) {\n                    $is_logged_in = true;\n                    $user_email = $token_user[\'email\'];\n                    // Optionally, renew session if logged in via token\n                    $_SESSION[\'user_id\'] = $token_user[\'id\'];\n                    $_SESSION[\'user_email\'] = $token_user[\'email\'];\n                }\n            }\n        }\n    }\n\n    echo json_encode([\'success\' => true, \'loggedIn\' => $is_logged_in, \'user\' => [\'email\' => $user_email]]);\n} else {\n    http_response_code(400);\n    echo json_encode([\'success\' => false, \'message\' => \'无效的请求。\']);\n}\n\n$conn->close();\n