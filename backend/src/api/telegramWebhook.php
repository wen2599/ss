<?php\n\n// --- POWERFUL DEBUGGING BLOCK (v2) ---\n$log_file = __DIR__ . '/../../public/debug_log.txt';\n$timestamp = date('Y-m-d H:i:s');\n$log_entry = \"--- LOG ENTRY: {$timestamp} ---\\n\";\n\n$raw_input = file_get_contents('php://input');\n$log_entry .= \"1. Raw Request from Telegram:\\n\" . $raw_input . \"\\n\\n\";\n$update = json_decode($raw_input, true);\n\nif (!$update) {\n    $log_entry .= \"ERROR: Failed to decode JSON from Telegram.\\n\";\n    file_put_contents($log_file, $log_entry, FILE_APPEND);\n    // Exit early if the request is not valid JSON\n    Response::json(['status' => 'error', 'message' => 'Invalid JSON']);\n    exit;\n}\n\n// Put the parsed update in GLOBALS for the rest of the script\n$GLOBALS['requestBody'] = $update;\n\nif (isset($update['message']['text']) && $update['message']['text'] === '/admin') {\n    $user_id_from_tg = $update['message']['from']['id'];\n    $admin_id_from_env = defined('TELEGRAM_ADMIN_ID') ? TELEGRAM_ADMIN_ID : 'NOT DEFINED';\n\n    $log_entry .= \"2. Admin Check Triggered for /admin command:\\n\";\n    \n    ob_start();\n    echo \"Value from Telegram:\\n\";\n    var_dump($user_id_from_tg);\n    echo \"\\nValue from .env file:\\n\";\n    var_dump($admin_id_from_env);\n    $log_entry .= ob_get_clean();\n\n    // Perform a strict comparison and log it\n    $strict_comparison = ($user_id_from_tg === $admin_id_from_env);\n    $log_entry .= \"\\nResult of STRICT comparison (\\$a === \\$b): \" . ($strict_comparison ? 'TRUE' : 'FALSE') . \"\\n\";\n    \n    // Perform a loose comparison and log it\n    $loose_comparison = ($user_id_from_tg == $admin_id_from_env);\n    $log_entry .= \"Result of LOOSE comparison (\\$a == \\$b): \" . ($loose_comparison ? 'TRUE' : 'FALSE') . \"\\n\";\n\n    // Perform the original string-casted comparison\n    $original_comparison = ((string)$user_id_from_tg === (string)$admin_id_from_env);\n    $log_entry .= \"Result of ORIGINAL string-cast comparison ((string)\\\$a === (string)\\\$b): \" . ($original_comparison ? 'TRUE' : 'FALSE') . \"\\n\";\n}\n\nfile_put_contents($log_file, $log_entry, FILE_APPEND);\n// --- END DEBUGGING BLOCK ---\n\n\n// --- ORIGINAL SCRIPT LOGIC (UNCHANGED) ---\n\n// Get the incoming update from Telegram\n$update = $GLOBALS['requestBody'];\n\n// Message Handling\nif (isset($update['message'])) {\n    $message = $update['message'];\n    $chat_id = $message['chat']['id'];\n    $user_id = $message['from']['id'];\n    $text = $message['text'] ?? '';\n\n    // Admin Command\n    if ($text === '/admin') {\n        if ((string)$user_id === TELEGRAM_ADMIN_ID) {\n            $keyboard = [\n                'inline_keyboard' => [\n                    [\n                        ['text' => ' 功能 1', 'callback_data' => 'admin_action_1'],\n                        ['text' => ' 功能 2', 'callback_data' => 'admin_action_2']\n                    ]\n                ]\n            ];\n            sendTelegramRequest('sendMessage', [\n                'chat_id' => $chat_id,\n                'text' => ' 管理员菜单',\n                'reply_markup' => json_encode($keyboard)\n            ]);\n        } else {\n            // If a non-admin user tries to use the /admin command, you can either ignore it\n            // or send a \"permission denied\" message. For now, we'll just log it.\n            error_log(\"Permission denied for /admin command from user_id: {$user_id}\");\n        }\n    }\n    // --- Hello Command (for testing) ---\n    elseif ($text === '/hello') {\n        sendMessage($chat_id, 'Hello there! I am up and running.');\n    }\n\n} \n// --- Callback Query Handling (for keyboard buttons) ---\nelseif (isset($update['callback_query'])) {\n    $callback_query = $update['callback_query'];\n    $chat_id = $callback_query['message']['chat']['id'];\n    $user_id = $callback_query['from']['id'];\n    $callback_data = $callback_query['data'];\n\n    // IMPORTANT: Acknowledge the callback query first to remove the \"loading\" state on the button\n    sendTelegramRequest('answerCallbackQuery', ['callback_query_id' => $callback_query['id']]);\n\n    // Check if the button was pressed by the administrator\n    if ((string)$user_id === TELEGRAM_ADMIN_ID) {\n        if ($callback_data === 'admin_action_1') {\n            // Respond to \"Function 1\" button press\n            sendMessage($chat_id, \"您点击了功能1！后台逻辑在这里执行。\");\n        } elseif ($callback_data === 'admin_action_2') {\n            // Respond to \"Function 2\" button press\n            sendMessage($chat_id, \"您点击了功能2！后台逻辑在这里执行。\");\n        }\n    } else {\n        // If a non-admin user somehow presses the button, ignore it.\n        error_log(\"Unauthorized callback_query from user_id: {$user_id}\");\n    }\n}\n\n// Respond to Telegram to acknowledge receipt of the update, preventing resends.\nResponse::json(['status' => 'ok']);\n