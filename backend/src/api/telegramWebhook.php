<?php\n\n// 唯一的入口点，加载所有依赖\nrequire_once __DIR__ . '/../../bootstrap.php';\n\n// 从 php://input 获取原始请求体\n$raw_input = file_get_contents('php://input');\nif (!$raw_input) {\n    // 如果没有输入，则不执行任何操作。这可以防止直接浏览器访问产生错误。\n    Response::json(['status' => 'ok', 'message' => 'No input received.']);\n    exit;\n}\n\n// 解码来自Telegram的JSON更新\n$update = json_decode($raw_input, true);\n\n// 如果JSON解码失败，记录错误并退出\nif (!$update) {\n    error_log('Telegram Webhook Error: Failed to decode JSON. Raw input: ' . $raw_input);\n    Response::json(['status' => 'error', 'message' => 'Invalid JSON received.']);\n    exit;\n}\n\n// 将更新存储在全局变量中，以便后续脚本访问\n$GLOBALS['requestBody'] = $update;\n\n// --- 消息处理 ---\nif (isset($update['message'])) {\n    $message = $update['message'];\n    $chat_id = $message['chat']['id'];\n    $user_id = $message['from']['id'];\n    $text = $message['text'] ?? '';\n\n    // --- /admin 命令处理 ---\n    if ($text === '/admin') {\n        // 使用 trim 确保环境变量中可能存在的多余空格被去除\n        if (isset($user_id) && (string)$user_id === trim(TELEGRAM_ADMIN_ID)) {\n            $keyboard = [\n                'inline_keyboard' => [\n                    [\n                        ['text' => ' 功能 1', 'callback_data' => 'admin_action_1'],\n                        ['text' => ' 功能 2', 'callback_data' => 'admin_action_2']\n                    ]\n                ]\n            ];\n\n            sendTelegramRequest('sendMessage', [\n                'chat_id' => $chat_id,\n                'text' => ' 管理员菜单',\n                'reply_markup' => json_encode($keyboard)\n            ]);\n        } else {\n             error_log("Permission denied for /admin command from user_id: {$user_id}. Expected admin_id: " . TELEGRAM_ADMIN_ID);\n        }\n    } \n    // --- /hello 命令 (用于简单测试) ---\n    elseif ($text === '/hello') {\n        sendMessage($chat_id, 'Hello there! The bot is active.');\n    }\n\n} \n// --- 回调查询处理 (用于键盘按钮) ---\nelseif (isset($update['callback_query'])) {\n    $callback_query = $update['callback_query'];\n    $chat_id = $callback_query['message']['chat']['id'];\n    $user_id = $callback_query['from']['id'];\n    $callback_data = $callback_query['data'];\n\n    // 总是先回应callback query，消除按钮上的加载状态\n    sendTelegramRequest('answerCallbackQuery', ['callback_query_id' => $callback_query['id']]);\n\n    // 再次确认是管理员在操作\n    if (isset($user_id) && (string)$user_id === trim(TELEGRAM_ADMIN_ID)) {\n        if ($callback_data === 'admin_action_1') {\n            sendMessage($chat_id, \"您点击了功能1！后台逻辑在这里执行。\");\n        } elseif ($callback_data === 'admin_action_2') {\n            sendMessage($chat_id, \"您点击了功能2！后台逻辑在这里执行。\");\n        }\n    } else {\n        error_log("Unauthorized callback_query from user_id: {$user_id}");\n    }\n}\n\n// 最后，向Telegram确认已收到更新，防止它重复发送\nResponse::json(['status' => 'ok']);\n