<?php\n\ndeclare(strict_types=1);\n\n// backend/handlers.php\n\nrequire_once __DIR__ . \'/settlement_rules.php\';\n\n/**\n * Handles the /help and /start command.\n */\nfunction handle_help_command($chat_id): void\n{\n    $reply_text = \"您好, 管理员！请使用下面的菜单进行操作或直接输入命令：\\n\\n\" .\n                  \"<b>--- 核心业务 ---</b>\\n\" .\n                  \"/settle [期号] - 执行指定期号的结算\\n\" .\n                  \"/report [期号] - 获取指定期号的结算报告\\n\" .\n                  \"/latest - 查询最新开奖记录\\n\" .\n                  \"/add [类型] [期号] [号码] - 手动添加开奖记录\\n\" .\n                  \"/delete [类型] [期号] - 删除开奖记录\\n\\n\" .\n                  \"<b>--- 用户管理 ---</b>\\n\" .\
                  \"/stats - 查看系统概况\\n\" .\
                  \"/finduser [关键词] - 查找用户 (用户名/邮箱)\\n\" .\
                  \"/deleteuser [关键词] - 删除用户及所有数据\\n\\n\" .\
                  \"<b>--- AI 助手 ---</b>\\n\" .\
                  \"/setgeminikey [密钥] - 配置Gemini API Key\\n\" .\
                  \"/cfchat [问题] - 与Cloudflare AI对话\\n\" .\
                  \"/geminichat [问题] - 与Gemini AI对话\\n\" .\
                  \"/help - 显示此帮助信息\";\n\n    $keyboard = [\n        \'keyboard\' => [\n            [[\'text\' => \'结算\'], [\'text\' => \'结算报告\']],\n            [[\'text\' => \'最新开奖\'], [\'text\' => \'系统统计\']],\n            [[\'text\' => \'查找用户\'], [\'text\' => \'删除用户\']],\n            [[\'text\' => \'CF AI 对话\'], [\'text\' => \'Gemini AI 对话\']],\n            [[\'text\' => \'更换Gemini Key\'], [\'text\' => \'帮助说明\']]\n        ],\n        \'resize_keyboard\' => true,\n        \'one_time_keyboard\' => false,\n        \'selective\' => true\n    ];\n\n    $reply_markup = json_encode($keyboard);\n    send_telegram_message($chat_id, $reply_text, $reply_markup, \"HTML\");\n}\n\n/**\n * Handles the /stats command.\n */\nfunction handle_stats_command($chat_id): void\n{\n    global $db_connection; // 确保 db_connection 可用\n    $stats = get_system_stats();\n    $reply_text = \"📊 系统统计数据:\\n\" .\n                  \"  - 注册用户数: {$stats[\'users\']}\\n\" .\
                  \"  - 已保存邮件数: {$stats[\'emails\']}\\n\" .\
                  \"  - 开奖记录数: {$stats[\'lottery_draws\']}\";\n    send_telegram_message($chat_id, $reply_text);\n}\n\n/**\n * Handles the /latest command.\n */\nfunction handle_latest_command($chat_id): void\n{\n    global $db_connection;\n    $query = \"SELECT draw_date, lottery_type, draw_period, numbers FROM lottery_draws ORDER BY id DESC LIMIT 1\";\n    $result = $db_connection->query($query);\n\n    if ($row = $result->fetch_assoc()) {\n        $reply_text = \"最新开奖记录:\\n\" .\
                      \"  - 类型: {$row[\'lottery_type\']}\\n\" .\
                      \"  - 日期: {$row[\'draw_date\']}\\n\" .\
                      \"  - 期号: {$row[\'draw_period\']}\\n\" .\
                      \"  - 号码: {$row[\'numbers\']}\";\n    } else {\n        $reply_text = \"数据库中没有开奖记录。\";\n    }\n    send_telegram_message($chat_id, $reply_text);\n}\n\n/**\n * Handles the /add command.\n */\nfunction handle_add_command($chat_id, array $command_parts): void\n{\n    if (count($command_parts) < 4) {\n        send_telegram_message($chat_id, \"格式错误。用法: /add [类型] [期号] [号码]\");\n        return;\n    }\n\n    $data = [\n        \'lottery_type\' => $command_parts[1],\n        \'draw_period\'  => $command_parts[2],\n        \'numbers\'      => $command_parts[3],\n        \'draw_date\'    => date(\'Y-m-d\')\n    ];\n\n    if (save_lottery_draw($data)) {\n        send_telegram_message($chat_id, \"成功添加开奖记录。\");\n    } else {\n        send_telegram_message($chat_id, \"添加开奖记录失败，可能该期号已存在。请检查日志。\");\n    }\n}\n\n/**\n * Handles the /delete command.\n */\nfunction handle_delete_command($chat_id, array $command_parts): void\n{\n    if (count($command_parts) < 3) {\n        send_telegram_message($chat_id, \"格式错误。用法: /delete [类型] [期号]\");\n        return;\n    }\n\n    global $db_connection;\n    $lottery_type = $command_parts[1];\n    $draw_period = $command_parts[2];\n\n    $stmt = $db_connection->prepare(\"DELETE FROM lottery_draws WHERE lottery_type = ? AND draw_period = ?\");\n    $stmt->bind_param(\"ss\", $lottery_type, $draw_period);\n\n    if ($stmt->execute() && $stmt->affected_rows > 0) {\n        send_telegram_message($chat_id, \"成功删除记录。\");\n    } else {\n        send_telegram_message($chat_id, \"未找到要删除的记录。\");\n    }\n    $stmt->close();\n}\n\n\n/**\n * Handles the /finduser command.\n */\nfunction handle_find_user_command($chat_id, array $command_parts): void\n{\n    if (count($command_parts) < 2) {\n        send_telegram_message($chat_id, \"格式错误。用法: /finduser [用户名或邮箱]\");\n        return;\n    }\n    \n    global $db_connection;\n    $search_term = $command_parts[1];\n\n    $stmt = $db_connection->prepare(\"SELECT id, username, email, created_at FROM users WHERE username = ? OR email = ?\");\n    $stmt->bind_param(\"ss\", $search_term, $search_term);\n    $stmt->execute();\n    $result = $stmt->get_result();\n\n    if ($user = $result->fetch_assoc()) {\n        $reply_text = \"✅ 找到用户信息:\\n\" .\
                      \"  - 用户ID: {$user[\'id\']}\\n\" .\
                      \"  - 用户名: {$user[\'username\']}\\n\" .\
                      \"  - 邮箱: {$user[\'email\']}\\n\" .\
                      \"  - 注册时间: {$user[\'created_at\']}\";\n    } else {\n        $reply_text = \"❌ 未找到用户: \" . htmlspecialchars($search_term);\n    }\n    $stmt->close();\n    send_telegram_message($chat_id, $reply_text);\n}\n\n\n/**\n * Handles the /deleteuser command.\n */\nfunction handle_delete_user_command($chat_id, array $command_parts): void\n{\n    if (count($command_parts) < 2) {\n        send_telegram_message($chat_id, \"格式错误。用法: /deleteuser [用户名或邮箱]\");\n        return;\n    }\n\n    global $db_connection;\n    $search_term = $command_parts[1];\n\n    $stmt_find = $db_connection->prepare(\"SELECT id, username, email FROM users WHERE username = ? OR email = ?\");\n    $stmt_find->bind_param(\"ss\", $search_term, $search_term);\n    $stmt_find->execute();\n    $result = $stmt_find->get_result();\n    \n    if (!$user = $result->fetch_assoc()) {\n        send_telegram_message($chat_id, \"❌ 未找到用户: \" . htmlspecialchars($search_term));\n        $stmt_find->close();\n        return;\n    }\n    $stmt_find->close();\n    \n    $user_id = $user[\'id\'];\n    $username = $user[\'username\'];\n\n    $db_connection->begin_transaction();\n    try {\n        $stmt_delete_emails = $db_connection->prepare(\"DELETE FROM emails WHERE user_id = ?\");\n        $stmt_delete_emails->bind_param(\"i\", $user_id);\n        $stmt_delete_emails->execute();\n        $email_rows_affected = $stmt_delete_emails->affected_rows;\n        $stmt_delete_emails->close();\n\n        $stmt_delete_user = $db_connection->prepare(\"DELETE FROM users WHERE id = ?\");\n        $stmt_delete_user->bind_param(\"i\", $user_id);\n        $stmt_delete_user->execute();\n        \n        $db_connection->commit();\n        send_telegram_message($chat_id, \"✅ 成功删除用户 {$username} 及 {$email_rows_affected} 封关联邮件。\");\n\n    } catch (Exception $e) {\n        $db_connection->rollback();\n        send_telegram_message($chat_id, \"❌ 操作失败！在删除过程中发生严重错误: \" . $e->getMessage());\n    }\n}\n\n/**\n * Handles setting the Gemini API key.\n */\nfunction handle_set_gemini_key_command($chat_id, array $command_parts): void\n{\n    if (count($command_parts) < 2) {\n        send_telegram_message($chat_id, \"格式错误。用法: /setgeminikey [API密钥]\");\n        return;\n    }\n    \n    $api_key = $command_parts[1];\n    if (set_gemini_api_key($api_key)) {\n        send_telegram_message($chat_id, \"✅ Gemini API密钥已成功更新。\");\n    } else {\n        send_telegram_message($chat_id, \"❌ 更新Gemini API密钥失败，请检查数据库或日志。\");\n    }\n}\n\n/**\n * Handles a chat request with an AI service.\n */\nfunction handle_ai_chat_command($chat_id, string $prompt, string $service): void\n{\n    send_telegram_message($chat_id, \"正在思考中，请稍候...\");\n\n    $response = chat_with_ai($prompt, $service);\n\n    if ($response !== null) {\n        // Telegram对Markdown的解析要求特定字符被转义\n        $escaped_response = str_replace(\n            [\'_\', \'*\', \'`\', \'[\'], \n            [\'\\_\', \'\\*\', \'\\`\', \'\\[\'], \n            $response\n        );\n        send_telegram_message($chat_id, $escaped_response, null, \'Markdown\');\n    } else {\n        $error_message = \"❌ AI（{$service}）调用失败。\\n请检查：\\n1. Cloudflare凭据是否在.env中正确配置。\\n2. Gemini API密钥是否已通过Bot正确设置。\\n3. API服务本身是否可用。\";\n        send_telegram_message($chat_id, $error_message);\n    }\n}\n\n/**\n * [MODIFIED] Handles the /settle command to process settlements for a specific draw period.\n */\nfunction handle_settle_command($chat_id, array $command_parts): void\n{\n    if (count($command_parts) < 2) {\n        send_telegram_message($chat_id, \"格式错误。用法: /settle [期号]\");\n        return;\n    }\n    $draw_period = $command_parts[1];\n\n    send_telegram_message($chat_id, \"收到请求！正在开始为期号 {$draw_period} 进行结算...\");\n\n    $result = process_settlements_for_draw($draw_period);\n\n    if ($result === null) {\n        send_telegram_message($chat_id, \"❌ 结算失败: 未能找到期号为 {$draw_period} 的开奖记录。请先添加该期的开奖号码。\");\n        return;\n    }\n\n    if ($result[\'settled_count\'] === 0) {\n        send_telegram_message($chat_id, \"ℹ️ 期号 {$draw_period} 没有找到待结算的单据。\");\n        return;\n    }\n\n    $net_profit = $result[\'total_bets\'] - $result[\'total_winnings\'];\n    $profit_emoji = $net_profit >= 0 ? \'🟢\' : \'🔴\';\n\n    $reply_text = \"✅ <b>期号 {$draw_period} 结算完成！</b>\\n\\n\" .\
                  \"- 结算单据数: {$result[\'settled_count\']} 张\\n\" .\
                  \"- 总投注额: \" . number_format($result[\'total_bets\'], 2) . \"\\n\" .\
                  \"- 总派奖额: \" . number_format($result[\'total_winnings\'], 2) . \"\\n\" .\
                  \"- {$profit_emoji} 本期利润: \" . number_format($net_profit, 2);\n\n    send_telegram_message($chat_id, $reply_text, null, \'HTML\');\n}\n\n/**\n * [MODIFIED] Handles the /report command to show a summary for a settled draw period.\n */\nfunction handle_report_command($chat_id, array $command_parts): void\n{\n    if (count($command_parts) < 2) {\n        send_telegram_message($chat_id, \"格式错误。用法: /report [期号]\");\n        return;\n    }\n    $draw_period = $command_parts[1];\n\n    $report = generate_settlement_report($draw_period);\n\n    if ($report === null) {\n        send_telegram_message($chat_id, \"❌ 未能生成报告: 未找到任何与期号 {$draw_period} 相关的已结算单据。\");\n        return;\n    }\n\n    $net_profit = $report[\'total_bets\'] - $report[\'total_winnings\'];\n    $profit_emoji = $net_profit >= 0 ? \'🟢\' : \'🔴\';\n\n    $reply_text = \"📊 <b>期号 {$draw_period} 结算报告</b>\\n\\n\" .\
                  \"- 已结算单据: {$report[\'settled_count\']} 张\\n\" .\
                  \"- 总投注额: \" . number_format($report[\'total_bets\'], 2) . \"\\n\" .\
                  \"- 总派奖额: \" . number_format($report[\'total_winnings\'], 2) . \"\\n\" .\
                  \"- {$profit_emoji} 本期利润: \" . number_format($net_profit, 2);\n    \n    send_telegram_message($chat_id, $reply_text, null, \'HTML\');\n}\n\n// --- Helper functions for settlement --- \n\n/**\n * [MODIFIED] Core settlement processing logic for a given draw period.\n */\nfunction process_settlements_for_draw(string $draw_period): ?array\n{\n    global $db_connection;\n    \n    // 1. Get lottery winning numbers\n    $stmt_draw = $db_connection->prepare(\"SELECT numbers FROM lottery_draws WHERE draw_period = ?\");\n    $stmt_draw->bind_param(\"s\", $draw_period);\n    $stmt_draw->execute();\n    $result_draw = $stmt_draw->get_result();\n    if (!($draw = $result_draw->fetch_assoc())) {\n        return null; // Draw not found\n    }\n    $winning_numbers = array_map(\'intval\', explode(\',\', $draw[\'numbers\']));\n    $stmt_draw->close();\n\n    // 2. Get all pending settlements for this draw\n    $stmt_settlements = $db_connection->prepare(\"SELECT id, settlement_data FROM settlements WHERE draw_period = ? AND status = \'pending_settlement\'\");\n    $stmt_settlements->bind_param(\"s\", $draw_period);\n    $stmt_settlements->execute();\n    $pending_settlements = $stmt_settlements->get_result()->fetch_all(MYSQLI_ASSOC);\n    $stmt_settlements->close();\n\n    if (empty($pending_settlements)) {\n        return [\'settled_count\' => 0, \'total_bets\' => 0, \'total_winnings\' => 0];\n    }\n\n    $total_winnings_all = 0;\n    $total_bets_all = 0;\n    \n    $db_connection->begin_transaction();\n    try {\n        foreach ($pending_settlements as $settlement) {\n            $settlement_id = $settlement[\'id\'];\n            $bets = json_decode($settlement[\'settlement_data\'], true);\n            $total_winnings_single = 0;\n\n            foreach ($bets as &$bet) { // Pass by reference to update\n                $winnings = calculate_winnings($bet, $winning_numbers);\n                $bet[\'winnings\'] = $winnings;\n                $bet[\'status\'] = $winnings > 0 ? \'中奖\' : \'未中奖\'; // 更新状态\n                $total_winnings_single += $winnings;\n                $total_bets_all += floatval($bet[\'amount\']);\n            }\n            unset($bet); // Unset reference\n\n            $total_winnings_all += $total_winnings_single;\n\n            // Update settlement in DB\n            $stmt_update = $db_connection->prepare(\"UPDATE settlements SET total_winnings = ?, settlement_data = ?, status = \'settled\' WHERE id = ?\");\n            $updated_data_json = json_encode($bets);\n            $stmt_update->bind_param(\"dsi\", $total_winnings_single, $updated_data_json, $settlement_id);\n            $stmt_update->execute();\n            $stmt_update->close();\n        }\n        $db_connection->commit();\n    } catch (Exception $e) {\n        $db_connection->rollback();\n        error_log(\"Settlement failed: \" . $e->getMessage());\n        return null;\n    }\n\n    return [\n        \'settled_count\' => count($pending_settlements),\n        \'total_bets\' => $total_bets_all,\n        \'total_winnings\' => $total_winnings_all\n    ];\n}\n\n/**\n * [MODIFIED] Generates a report for an already settled draw period。\n */\nfunction generate_settlement_report(string $draw_period): ?array\n{\n    global $db_connection;\n    $stmt = $db_connection->prepare(\"SELECT COUNT(id) as settled_count, SUM(total_amount) as total_bets, SUM(total_winnings) as total_winnings FROM settlements WHERE draw_period = ? AND status = \'settled\'\");\n    $stmt->bind_param(\"s\", $draw_period);\n    $stmt->execute();\n    $result = $stmt->get_result()->fetch_assoc();\n    $stmt->close();\n\n    if (empty($result) || $result[\'settled_count\'] == 0) {\n        return null;\n    }\n\n    return [\n        \'settled_count\' => (int)$result[\'settled_count\'],\n        \'total_bets\' => (float)$result[\'total_bets\'],\n        \'total_winnings\' => (float)$result[\'total_winnings\']\n    ];\n}\n