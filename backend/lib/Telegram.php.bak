<?php

namespace App\\Lib;

use Monolog\\Logger;

class Telegram
{
    private $botToken;
    private $logger;

    public function __construct(string $botToken, Logger $logger)
    {
        $this->botToken = $botToken;
        $this->logger = $logger;
    }

    private function callApi(string $method, array $data)
    {
        $url = "https://api.telegram.org/bot" . $this->botToken . "/" . $method;

        $options = [
            'http' => [
                'header' => "Content-type: application/x-www-form-urlencoded\\r\\n",
                'method' => 'POST',
                'content' => http_build_query($data),
                'timeout' => 10, // 10 seconds timeout
            ],
        ];
        $context = stream_context_create($options);
        
        $response = @file_get_contents($url, false, $context);

        if ($response === false) {
            $error = error_get_last();
            $this->logger->error("Telegram API call failed (" . $method . "): " . ($error['message'] ?? 'Unknown error'));
            return false;
        }

        $responseData = json_decode($response, true);
        if (json_last_error() !== JSON_ERROR_NONE) {
            $this->logger->error("Telegram API response JSON decode error (" . $method . "): " . json_last_error_msg());
            return false;
        }

        if (!isset($responseData['ok']) || !$responseData['ok']) {
            $this->logger->error("Telegram API error response (" . $method . "): " . ($responseData['description'] ?? 'No description'));
            return false;
        }

        return $responseData;
    }

    public function sendMessage(int $chat_id, string $text, ?array $reply_markup = null)
    {
        $data = [
            'chat_id' => $chat_id,
            'text' => $text,
            'parse_mode' => 'Markdown',
        ];
        if ($reply_markup) {
            $data['reply_markup'] = json_encode($reply_markup);
        }

        return $this->callApi('sendMessage', $data);
    }

    public function editMessageText(int $chat_id, int $message_id, string $text)
    {
        $data = [
            'chat_id' => $chat_id,
            'message_id' => $message_id,
            'text' => $text,
            'parse_mode' => 'Markdown',
        ];

        return $this->callApi('editMessageText', $data);
    }

    public function answerCallbackQuery(string $callback_query_id, ?string $text = null, bool $show_alert = false)
    {
        $data = [
            'callback_query_id' => $callback_query_id,
        ];
        if ($text) {
            $data['text'] = $text;
        }
        if ($show_alert) {
            $data['show_alert'] = true;
        }

        return $this->callApi('answerCallbackQuery', $data);
    }
}
