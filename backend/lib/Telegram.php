<?php\n\nnamespace App\\Lib;\n\nuse Monolog\\Logger;\nuse Monolog\\Handler\\StreamHandler;\n\nclass Telegram\n{
    private $botToken;\n    private $logger;\n\n    public function __construct(string $botToken, Logger $logger)\n    {\n        $this->botToken = $botToken;\n        $this->logger = $logger;\n    }\n\n    private function callApi(string $method, array $data)\n    {\n        $url = \"https://api.telegram.org/bot\" . $this->botToken . \"/\" . $method;\n\n        $options = [\n            \'http\' => [\n                \'header\' => \"Content-type: application/x-www-form-urlencoded\\r\\n\",\n                \'method\' => \'POST\',\n                \'content\' => http_build_query($data),\n                \'timeout\' => 10, // 10 seconds timeout\n            ],\n        ];\n        $context = stream_context_create($options);\n        \n        $response = @file_get_contents($url, false, $context);\n\n        if ($response === false) {\n            $error = error_get_last();\n            $this->logger->error(\"Telegram API call failed (\" . $method . \"): \" . ($error[\'message\'] ?? \'Unknown error\'));\n            return false;\n        }\n\n        $responseData = json_decode($response, true);\n        if (json_last_error() !== JSON_ERROR_NONE) {\n            $this->logger->error(\"Telegram API response JSON decode error (\" . $method . \"): \" . json_last_error_msg());\n            return false;\n        }\n\n        if (!isset($responseData[\'ok\']) || !$responseData[\'ok\']) {\n            $this->logger->error(\"Telegram API error response (\" . $method . \"): \" . ($responseData[\'description\'] ?? \'No description\'));\n            return false;\n        }\n\n        return $responseData;\n    }\n\n    public function sendMessage(int $chat_id, string $text, ?array $reply_markup = null)\n    {\n        $data = [\n            \'chat_id\' => $chat_id,\n            \'text\' => $text,\n            \'parse_mode\' => \'Markdown\',\n        ];\n        if ($reply_markup) {\n            $data[\'reply_markup\'] = json_encode($reply_markup);\n        }\n\n        return $this->callApi(\'sendMessage\', $data);\n    }\n\n    public function editMessageText(int $chat_id, int $message_id, string $text)\n    {\n        $data = [\n            \'chat_id\' => $chat_id,\n            \'message_id\' => $message_id,\n            \'text\' => $text,\n            \'parse_mode\' => \'Markdown\',\n        ];\n\n        return $this->callApi(\'editMessageText\', $data);\n    }\n\n    public function answerCallbackQuery(string $callback_query_id, ?string $text = null, bool $show_alert = false)\n    {\n        $data = [\n            \'callback_query_id\' => $callback_query_id,\n        ];\n        if ($text) {\n            $data[\'text\'] = $text;\n        }\n        if ($show_alert) {\n            $data[\'show_alert\'] = true;\n        }\n\n        return $this->callApi(\'answerCallbackQuery\', $data);\n    }\n}
