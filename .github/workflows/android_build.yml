name: Android CI

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: cd frontend && npm install

    - name: Build React frontend
      run: cd frontend && npm run build

    - name: Sync Capacitor web assets to Android
      run: cd frontend && npx cap sync android

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Build Android release APK (Unsigned)
      run: cd android && ./gradlew assembleRelease

    # Signing step would go here
    # To sign the APK, you would typically:
    # 1. Decode the base64 encoded keystore file from a GitHub Secret
    # 2. Use apksigner to sign the generated unsigned APK
    # Example (requires setup of KEYSTORE_FILE, KEYSTORE_PASSWORD, KEY_ALIAS, KEY_PASSWORD secrets):
    # - name: Sign APK
    #   run: |
    #     echo ${{ secrets.KEYSTORE_FILE }} | base64 --decode > keystore.jks
    #     apksigner sign --verbose --ks keystore.jks --ks-pass env:KEYSTORE_PASSWORD --alias ${{ secrets.KEY_ALIAS }} --key-pass env:KEY_PASSWORD android/app/build/outputs/apk/release/app-release-unsigned.apk
    #   env:
    #     KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
    #     KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}

    - name: Upload Unsigned APK
      uses: actions/upload-artifact@v4 # Updated to v4
      with:
        name: app-release-unsigned
        path: android/app/build/outputs/apk/release/app-release-unsigned.apk