# This workflow builds an Android APK using Capacitor.

name: Android Build

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js 2.x
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'

    - name: Cache Node.js modules
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install dependencies
      run: cd frontend && npm install

    - name: Build React frontend
      run: cd frontend && CI=false NODE_OPTIONS=--openssl-legacy-provider npm run build

    - name: Sync Capacitor web assets to Android
      run: cd frontend && npx cap sync android

    - name: List android directory contents
      run: cd frontend && ls -la ../android

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Build Android Release APK
      run: cd frontend && ../android/gradlew assembleRelease -p ../android

    # Signing step would go here.
    # You would typically decode your keystore file from a Secret,
    # then use apksigner to sign the unsigned APK.

    - name: Upload unsigned APK
      uses: actions/upload-artifact@v4
      with:
        name: app-release-unsigned-apk
        path: android/app/build/outputs/apk/release/app-release-unsigned.apk
