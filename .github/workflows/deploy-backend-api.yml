name: Deploy backend to serv00

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'  # 只有 backend 目录下的文件变动才触发

jobs:
  deploy:
    name: Deploy to Serv00
    runs-on: ubuntu-latest

    steps:
      # 1. 检出代码
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. 设置 SSH 密钥
      - name: Setup SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SERV00_KEY }}

      # 3. 将 Serv00 主机添加到 known_hosts
      - name: Add Serv00 to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H "${{ secrets.SERV00_HOST }}" >> ~/.ssh/known_hosts

      # 4. 检查远程目录权限和状态（调试用）
      - name: Check remote directory status
        run: |
          echo "Checking remote directory permissions and existence..."
          ssh -o BatchMode=yes "${{ secrets.SERV00_USER }}@${{ secrets.SERV00_HOST }}" "
            echo '当前工作目录:';
            pwd;
            echo -e '\n目标目录状态:';
            ls -ld \"${{ secrets.SERV00_PATH }}\" || echo '目录不存在';
            echo -e '\n上级目录权限:';
            ls -ld \"$(dirname \"${{ secrets.SVO0_PATH }}\")\" || echo '上级目录不存在';
            echo -e '\n磁盘使用情况:';
            df -h . | head -2
          "
        continue-on-error: true  # 即使失败也继续，不影响后续同步

      # 5. 确保远程目录存在
      - name: Ensure remote directory exists
        run: |
          ssh -o BatchMode=yes "${{ secrets.SERV00_USER }}@${{ secrets.SERV00_HOST }}" "
            mkdir -p \"${{ secrets.SERV00_PATH }}\"
            echo '目录创建成功或已存在'
          "

      # 6. 使用 rsync 同步文件（排除敏感文件）
      - name: Sync files with rsync
        run: |
          echo "开始同步 backend 目录到远程服务器..."
          rsync --version
          echo -e "\n执行以下 rsync 命令:"
          echo "rsync -avz --delete --exclude='config.php' --exclude='.env*' --exclude='.git/' -e 'ssh -o BatchMode=yes' ./backend/ \"${{ secrets.SERV00_USER }}@${{ secrets.SERV00_HOST }}:${{ secrets.SERV00_PATH }}/\""

          # 实际执行 rsync
          rsync -avz \
            --delete \
            --exclude='config.php' \
            --exclude='.env*' \
            --exclude='.git/' \
            --exclude='node_modules/' \
            -e "ssh -o BatchMode=yes -o ConnectTimeout=30" \
            ./backend/ "${{ secrets.SERV00_USER }}@${{ secrets.SERV00_HOST }}:${{ secrets.SERV00_PATH }}/"

          echo -e "\n✅ 文件同步完成"

      # 7. 验证部署结果
      - name: Verify deployment
        run: |
          echo "验证部署结果..."
          ssh -o BatchMode=yes "${{ secrets.SERV00_USER }}@${{ secrets.SERV00_HOST }}" "
            echo -e '\n目标目录文件列表（前20个）:';
            find \"${{ secrets.SERV00_PATH }}\" -maxdepth 1 -type f | head -20;
            echo -e '\n目录大小信息:';
            du -sh \"${{ secrets.SERV00_PATH }}\"
          "

      # 8. 可选：在远程服务器上设置权限（如果需要）
      - name: Set remote file permissions (if needed)
        run: |
          echo "设置远程文件权限..."
          ssh -o BatchMode=yes "${{ secrets.SERV00_USER }}@${{ secrets.SERV00_HOST }}" "
            # 更改文件所有者（如果需要，请取消注释下一行，并将 youruser 替换为正确的用户）
            # chown -R youruser:yourgroup \"${{ secrets.SERV00_PATH }}\"
            
            # 设置目录和文件权限
            find \"${{ secrets.SERV00_PATH }}\" -type d -exec chmod 755 {} \\;
            find \"${{ secrets.SERV00_PATH }}\" -type f -exec chmod 644 {} \\;
            
            # 如果有需要执行权限的文件（如脚本），可单独设置
            # find \"${{ secrets.SERV00_PATH }}\" -name \"*.sh\" -exec chmod +x {} \\;
            
            echo '权限设置完成'
          "

  # 可选：添加一个测试任务，验证部署是否成功
  verify-deployment:
    name: Verify deployment success
    runs-on: ubuntu-latest
    needs: deploy  # 依赖于 deploy 任务完成
    if: always()  # 即使上一个任务失败也运行

    steps:
      - name: Check deployment status
        run: |
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "✅ 部署任务成功完成"
            # 这里可以添加更多的验证逻辑，例如：
            # - 检查网站是否可访问
            # - 运行API测试
            # - 验证关键文件是否存在
          else
            echo "❌ 部署任务失败: ${{ needs.deploy.result }}"
            exit 1
          fi
