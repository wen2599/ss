{"ast":null,"code":"// api.js\n// Base URL for the backend API\nconst API_BASE_URL='https://wenge.cloudns.ch';// Use the provided backend domain\n// Function to create a new game room\nexport const createRoom=async()=>{try{const response=await fetch(`${API_BASE_URL}/create_room`,{method:'POST',headers:{'Content-Type':'application/json'}// Optionally send some initial data, e.g., player name if needed on creation\n// body: JSON.stringify({ playerName: 'Host Player' }),\n});if(!response.ok){throw new Error(`HTTP error! status: ${response.status}`);}return await response.json();}catch(error){console.error('Error creating room:',error);throw error;// Re-throw the error for handling in the component\n}};// Function to join an existing game room\nexport const joinRoom=async roomId=>{try{const response=await fetch(`${API_BASE_URL}/join_room`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({roomId})});return await response.json();// Assuming the backend always returns JSON\n}catch(error){console.error('Error joining room:',error);throw error;}};// Function to get the current state of a game room\nexport const getRoomState=async(roomId,playerId)=>{try{const response=await fetch(`${API_BASE_URL}/get_room_state?roomId=${roomId}&playerId=${playerId}`,{method:'GET',headers:{'Content-Type':'application/json'}});const data=await response.json();return data;// Assuming the backend returns the room state within a 'room' key\n}catch(error){console.error('Error getting room state:',error);throw error;}};","map":{"version":3,"names":["API_BASE_URL","createRoom","response","fetch","method","headers","ok","Error","status","json","error","console","joinRoom","roomId","body","JSON","stringify","getRoomState","playerId","data"],"sources":["/home/user/ss/frontend/src/api.js"],"sourcesContent":["// api.js\n\n// Base URL for the backend API\nconst API_BASE_URL = 'https://wenge.cloudns.ch'; // Use the provided backend domain\n\n// Function to create a new game room\nexport const createRoom = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/create_room`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      // Optionally send some initial data, e.g., player name if needed on creation\n      // body: JSON.stringify({ playerName: 'Host Player' }),\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('Error creating room:', error);\n    throw error; // Re-throw the error for handling in the component\n  }\n};\n\n// Function to join an existing game room\nexport const joinRoom = async (roomId) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/join_room`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ roomId }),\n    });\n\n    return await response.json(); // Assuming the backend always returns JSON\n  } catch (error) {\n    console.error('Error joining room:', error);\n    throw error;\n  }\n};\n\n// Function to get the current state of a game room\nexport const getRoomState = async (roomId, playerId) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/get_room_state?roomId=${roomId}&playerId=${playerId}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    const data = await response.json();\n    return data; // Assuming the backend returns the room state within a 'room' key\n  } catch (error) {\n    console.error('Error getting room state:', error);\n    throw error;\n  }\n};\n"],"mappings":"AAAA;AAEA;AACA,KAAM,CAAAA,YAAY,CAAG,0BAA0B,CAAE;AAEjD;AACA,MAAO,MAAM,CAAAC,UAAU,CAAG,KAAAA,CAAA,GAAY,CACpC,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,GAAGH,YAAY,cAAc,CAAE,CAC1DI,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CACA;AACA;AACF,CAAC,CAAC,CAEF,GAAI,CAACH,QAAQ,CAACI,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAAC,uBAAuBL,QAAQ,CAACM,MAAM,EAAE,CAAC,CAC3D,CAEA,MAAO,MAAM,CAAAN,QAAQ,CAACO,IAAI,CAAC,CAAC,CAC9B,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,CAAEA,KAAK,CAAC,CAC5C,KAAM,CAAAA,KAAK,CAAE;AACf,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAE,QAAQ,CAAG,KAAO,CAAAC,MAAM,EAAK,CACxC,GAAI,CACF,KAAM,CAAAX,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,GAAGH,YAAY,YAAY,CAAE,CACxDI,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CAAE,cAAc,CAAE,kBAAmB,CAAC,CAC/CS,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAAEH,MAAO,CAAC,CACjC,CAAC,CAAC,CAEF,MAAO,MAAM,CAAAX,QAAQ,CAACO,IAAI,CAAC,CAAC,CAAE;AAChC,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,CAAEA,KAAK,CAAC,CAC3C,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAO,YAAY,CAAG,KAAAA,CAAOJ,MAAM,CAAEK,QAAQ,GAAK,CACtD,GAAI,CACF,KAAM,CAAAhB,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,GAAGH,YAAY,0BAA0Ba,MAAM,aAAaK,QAAQ,EAAE,CAAE,CACnGd,MAAM,CAAE,KAAK,CACbC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CACF,CAAC,CAAC,CAEF,KAAM,CAAAc,IAAI,CAAG,KAAM,CAAAjB,QAAQ,CAACO,IAAI,CAAC,CAAC,CAClC,MAAO,CAAAU,IAAI,CAAE;AACf,CAAE,MAAOT,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,CAAEA,KAAK,CAAC,CACjD,KAAM,CAAAA,KAAK,CACb,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}