{"ast":null,"code":"import React,{useState}from'react';import'./App.css';// You might need to create/update this CSS file\nimport GameTable from'./components/GameTable';// Ensure GameTable can receive bottomCards and gameState\nimport PlayerArea from'./components/PlayerArea';import{createRoom,joinRoom,getRoomState}from'./api';// Import API functions\n// Test modification line\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[inputRoomId,setInputRoomId]=useState('');// Input field for room ID\nconst[currentRoomId,setCurrentRoomId]=useState(null);// Joined room ID\nconst[currentPlayerId,setCurrentPlayerId]=useState(null);// Current player's ID\nconst[players,setPlayers]=useState([]);// List of players in the room\nconst[cardsOnTable,setCardsOnTable]=useState([]);// Cards on the table\nconst[bottomCards,setBottomCards]=useState([]);// State for bottom cards\nconst handleCreateRoom=async()=>{const response=await createRoom();if(response&&response.success){console.log('Room created successfully:',response);setCurrentRoomId(response.roomId);await fetchGameState(response.roomId,response.playerId);// Fetch state after creating\n}else{console.error('Failed to create room:',response);}};const handleJoinRoom=async()=>{if(inputRoomId){const response=await joinRoom(inputRoomId);if(response&&response.success){console.log('Joined room successfully:',response);setCurrentRoomId(response.roomId);await fetchGameState(response.roomId,response.playerId);// Fetch state after joining\n}else{console.error('Failed to join room:',response);}}else{console.log('Please enter a Room ID to join.');}};const fetchGameState=async(roomId,playerId)=>{try{const gameStateResponse=await getRoomState(roomId,playerId);if(gameStateResponse&&gameStateResponse.success){console.log('Game state fetched successfully:',gameStateResponse.room);setCurrentPlayerId(playerId);// Set current player ID\nsetPlayers(Object.values(gameStateResponse.room.players));// Update players state\nsetCardsOnTable(gameStateResponse.room.discarded_cards);// Update cards on table state\nsetBottomCards(gameStateResponse.room.bottom_cards||[]);// Update bottom cards state\n}}catch(error){console.error('Failed to fetch game state:',error);}};// Conditional rendering based on whether a room is joined\nif(!currentRoomId){return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"\\u6597\\u5730\\u4E3B\\u591A\\u4EBA\\u6E38\\u620F\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"room-management\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"\\u623F\\u95F4\\u7BA1\\u7406\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"\\u8F93\\u5165\\u623F\\u95F4ID\",value:inputRoomId,onChange:e=>setInputRoomId(e.target.value)}),/*#__PURE__*/_jsx(\"button\",{onClick:handleCreateRoom,children:\"\\u521B\\u5EFA\\u623F\\u95F4\"}),/*#__PURE__*/_jsx(\"button\",{onClick:handleJoinRoom,children:\"\\u52A0\\u5165\\u623F\\u95F4\"})]})]});}// Render game area if a room is joined\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"\\u6597\\u5730\\u4E3B\\u591A\\u4EBA\\u6E38\\u620F\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"game-container\",style:{display:'flex',flexDirection:'column',height:'100vh'},children:[/*#__PURE__*/_jsx(\"div\",{className:\"game-table-area\",children:/*#__PURE__*/_jsx(GameTable,{cardsOnTable:cardsOnTable,bottomCards:bottomCards})}),/*#__PURE__*/_jsxs(\"div\",{className:\"player-areas\",children:[\" \",players.map(player=>{const isCurrent=player.id===currentPlayerId;return/*#__PURE__*/_jsx(PlayerArea,{player:player,isCurrentPlayer:isCurrent},player.id);})]})]})]});}export default App;","map":{"version":3,"names":["React","useState","GameTable","PlayerArea","createRoom","joinRoom","getRoomState","jsx","_jsx","jsxs","_jsxs","App","inputRoomId","setInputRoomId","currentRoomId","setCurrentRoomId","currentPlayerId","setCurrentPlayerId","players","setPlayers","cardsOnTable","setCardsOnTable","bottomCards","setBottomCards","handleCreateRoom","response","success","console","log","roomId","fetchGameState","playerId","error","handleJoinRoom","gameStateResponse","room","Object","values","discarded_cards","bottom_cards","className","children","type","placeholder","value","onChange","e","target","onClick","style","display","flexDirection","height","map","player","isCurrent","id","isCurrentPlayer"],"sources":["/home/user/ss/frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css'; // You might need to create/update this CSS file\nimport GameTable from './components/GameTable'; // Ensure GameTable can receive bottomCards and gameState\nimport PlayerArea from './components/PlayerArea';\nimport { createRoom, joinRoom, getRoomState } from './api'; // Import API functions\n// Test modification line\n\nfunction App() {\n  const [inputRoomId, setInputRoomId] = useState(''); // Input field for room ID\n  const [currentRoomId, setCurrentRoomId] = useState(null); // Joined room ID\n  const [currentPlayerId, setCurrentPlayerId] = useState(null); // Current player's ID\n  const [players, setPlayers] = useState([]); // List of players in the room\n  const [cardsOnTable, setCardsOnTable] = useState([]); // Cards on the table\n  const [bottomCards, setBottomCards] = useState([]); // State for bottom cards\n\n\n  const handleCreateRoom = async () => {\n    const response = await createRoom();\n    if (response && response.success) {\n      console.log('Room created successfully:', response);\n      setCurrentRoomId(response.roomId);\n      await fetchGameState(response.roomId, response.playerId); // Fetch state after creating\n    } else {\n      console.error('Failed to create room:', response);\n    }\n  };\n\n  const handleJoinRoom = async () => {\n    if (inputRoomId) {\n      const response = await joinRoom(inputRoomId);\n      if (response && response.success) {\n        console.log('Joined room successfully:', response);\n        setCurrentRoomId(response.roomId);\n        await fetchGameState(response.roomId, response.playerId); // Fetch state after joining\n      } else {\n        console.error('Failed to join room:', response);\n      }\n    } else {\n      console.log('Please enter a Room ID to join.');\n    }\n  };\n\n  const fetchGameState = async (roomId, playerId) => {\n    try {\n      const gameStateResponse = await getRoomState(roomId, playerId);\n      if (gameStateResponse && gameStateResponse.success) {\n        console.log('Game state fetched successfully:', gameStateResponse.room);\n        setCurrentPlayerId(playerId); // Set current player ID\n        setPlayers(Object.values(gameStateResponse.room.players)); // Update players state\n        setCardsOnTable(gameStateResponse.room.discarded_cards); // Update cards on table state\n        setBottomCards(gameStateResponse.room.bottom_cards || []); // Update bottom cards state\n      }\n    } catch (error) {\n      console.error('Failed to fetch game state:', error);\n    }\n  };\n\n  // Conditional rendering based on whether a room is joined\n  if (!currentRoomId) {\n    return (\n      <div className=\"App\">\n        <h1>斗地主多人游戏</h1>\n        <div className=\"room-management\">\n          <h2>房间管理</h2>\n          <input\n            type=\"text\"\n            placeholder=\"输入房间ID\"\n            value={inputRoomId}\n            onChange={(e) => setInputRoomId(e.target.value)}\n          />\n          <button onClick={handleCreateRoom}>创建房间</button>\n          <button onClick={handleJoinRoom}>加入房间</button>\n        </div>\n      </div>\n    );\n  }\n\n  // Render game area if a room is joined\n  return (\n    <div className=\"App\">\n      <h1>斗地主多人游戏</h1>\n      <div\n        className=\"game-container\"\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          height: '100vh'\n        }}\n      >\n        <div className=\"game-table-area\">\n          <GameTable cardsOnTable={cardsOnTable} bottomCards={bottomCards} />\n        </div>\n        <div className=\"player-areas\"> {/* Container for all player areas */}\n          {players.map(player => {\n            const isCurrent = player.id === currentPlayerId;\n            return (\n              <PlayerArea key={player.id} player={player} isCurrentPlayer={isCurrent} />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,MAAO,WAAW,CAAE;AACpB,MAAO,CAAAC,SAAS,KAAM,wBAAwB,CAAE;AAChD,MAAO,CAAAC,UAAU,KAAM,yBAAyB,CAChD,OAASC,UAAU,CAAEC,QAAQ,CAAEC,YAAY,KAAQ,OAAO,CAAE;AAC5D;AAAA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEA,QAAS,CAAAC,GAAGA,CAAA,CAAG,CACb,KAAM,CAACC,WAAW,CAAEC,cAAc,CAAC,CAAGZ,QAAQ,CAAC,EAAE,CAAC,CAAE;AACpD,KAAM,CAACa,aAAa,CAAEC,gBAAgB,CAAC,CAAGd,QAAQ,CAAC,IAAI,CAAC,CAAE;AAC1D,KAAM,CAACe,eAAe,CAAEC,kBAAkB,CAAC,CAAGhB,QAAQ,CAAC,IAAI,CAAC,CAAE;AAC9D,KAAM,CAACiB,OAAO,CAAEC,UAAU,CAAC,CAAGlB,QAAQ,CAAC,EAAE,CAAC,CAAE;AAC5C,KAAM,CAACmB,YAAY,CAAEC,eAAe,CAAC,CAAGpB,QAAQ,CAAC,EAAE,CAAC,CAAE;AACtD,KAAM,CAACqB,WAAW,CAAEC,cAAc,CAAC,CAAGtB,QAAQ,CAAC,EAAE,CAAC,CAAE;AAGpD,KAAM,CAAAuB,gBAAgB,CAAG,KAAAA,CAAA,GAAY,CACnC,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAArB,UAAU,CAAC,CAAC,CACnC,GAAIqB,QAAQ,EAAIA,QAAQ,CAACC,OAAO,CAAE,CAChCC,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAEH,QAAQ,CAAC,CACnDV,gBAAgB,CAACU,QAAQ,CAACI,MAAM,CAAC,CACjC,KAAM,CAAAC,cAAc,CAACL,QAAQ,CAACI,MAAM,CAAEJ,QAAQ,CAACM,QAAQ,CAAC,CAAE;AAC5D,CAAC,IAAM,CACLJ,OAAO,CAACK,KAAK,CAAC,wBAAwB,CAAEP,QAAQ,CAAC,CACnD,CACF,CAAC,CAED,KAAM,CAAAQ,cAAc,CAAG,KAAAA,CAAA,GAAY,CACjC,GAAIrB,WAAW,CAAE,CACf,KAAM,CAAAa,QAAQ,CAAG,KAAM,CAAApB,QAAQ,CAACO,WAAW,CAAC,CAC5C,GAAIa,QAAQ,EAAIA,QAAQ,CAACC,OAAO,CAAE,CAChCC,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAEH,QAAQ,CAAC,CAClDV,gBAAgB,CAACU,QAAQ,CAACI,MAAM,CAAC,CACjC,KAAM,CAAAC,cAAc,CAACL,QAAQ,CAACI,MAAM,CAAEJ,QAAQ,CAACM,QAAQ,CAAC,CAAE;AAC5D,CAAC,IAAM,CACLJ,OAAO,CAACK,KAAK,CAAC,sBAAsB,CAAEP,QAAQ,CAAC,CACjD,CACF,CAAC,IAAM,CACLE,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC,CAChD,CACF,CAAC,CAED,KAAM,CAAAE,cAAc,CAAG,KAAAA,CAAOD,MAAM,CAAEE,QAAQ,GAAK,CACjD,GAAI,CACF,KAAM,CAAAG,iBAAiB,CAAG,KAAM,CAAA5B,YAAY,CAACuB,MAAM,CAAEE,QAAQ,CAAC,CAC9D,GAAIG,iBAAiB,EAAIA,iBAAiB,CAACR,OAAO,CAAE,CAClDC,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAEM,iBAAiB,CAACC,IAAI,CAAC,CACvElB,kBAAkB,CAACc,QAAQ,CAAC,CAAE;AAC9BZ,UAAU,CAACiB,MAAM,CAACC,MAAM,CAACH,iBAAiB,CAACC,IAAI,CAACjB,OAAO,CAAC,CAAC,CAAE;AAC3DG,eAAe,CAACa,iBAAiB,CAACC,IAAI,CAACG,eAAe,CAAC,CAAE;AACzDf,cAAc,CAACW,iBAAiB,CAACC,IAAI,CAACI,YAAY,EAAI,EAAE,CAAC,CAAE;AAC7D,CACF,CAAE,MAAOP,KAAK,CAAE,CACdL,OAAO,CAACK,KAAK,CAAC,6BAA6B,CAAEA,KAAK,CAAC,CACrD,CACF,CAAC,CAED;AACA,GAAI,CAAClB,aAAa,CAAE,CAClB,mBACEJ,KAAA,QAAK8B,SAAS,CAAC,KAAK,CAAAC,QAAA,eAClBjC,IAAA,OAAAiC,QAAA,CAAI,4CAAO,CAAI,CAAC,cAChB/B,KAAA,QAAK8B,SAAS,CAAC,iBAAiB,CAAAC,QAAA,eAC9BjC,IAAA,OAAAiC,QAAA,CAAI,0BAAI,CAAI,CAAC,cACbjC,IAAA,UACEkC,IAAI,CAAC,MAAM,CACXC,WAAW,CAAC,4BAAQ,CACpBC,KAAK,CAAEhC,WAAY,CACnBiC,QAAQ,CAAGC,CAAC,EAAKjC,cAAc,CAACiC,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE,CACjD,CAAC,cACFpC,IAAA,WAAQwC,OAAO,CAAExB,gBAAiB,CAAAiB,QAAA,CAAC,0BAAI,CAAQ,CAAC,cAChDjC,IAAA,WAAQwC,OAAO,CAAEf,cAAe,CAAAQ,QAAA,CAAC,0BAAI,CAAQ,CAAC,EAC3C,CAAC,EACH,CAAC,CAEV,CAEA;AACA,mBACE/B,KAAA,QAAK8B,SAAS,CAAC,KAAK,CAAAC,QAAA,eAClBjC,IAAA,OAAAiC,QAAA,CAAI,4CAAO,CAAI,CAAC,cAChB/B,KAAA,QACE8B,SAAS,CAAC,gBAAgB,CAC1BS,KAAK,CAAE,CACLC,OAAO,CAAE,MAAM,CACfC,aAAa,CAAE,QAAQ,CACvBC,MAAM,CAAE,OACV,CAAE,CAAAX,QAAA,eAEFjC,IAAA,QAAKgC,SAAS,CAAC,iBAAiB,CAAAC,QAAA,cAC9BjC,IAAA,CAACN,SAAS,EAACkB,YAAY,CAAEA,YAAa,CAACE,WAAW,CAAEA,WAAY,CAAE,CAAC,CAChE,CAAC,cACNZ,KAAA,QAAK8B,SAAS,CAAC,cAAc,CAAAC,QAAA,EAAC,GAAC,CAC5BvB,OAAO,CAACmC,GAAG,CAACC,MAAM,EAAI,CACrB,KAAM,CAAAC,SAAS,CAAGD,MAAM,CAACE,EAAE,GAAKxC,eAAe,CAC/C,mBACER,IAAA,CAACL,UAAU,EAAiBmD,MAAM,CAAEA,MAAO,CAACG,eAAe,CAAEF,SAAU,EAAtDD,MAAM,CAACE,EAAiD,CAAC,CAE9E,CAAC,CAAC,EACC,CAAC,EACH,CAAC,EACH,CAAC,CAEV,CAEA,cAAe,CAAA7C,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}