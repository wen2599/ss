{"version":3,"file":"fix-eperm.js","sourceRoot":"","sources":["../../src/fix-eperm.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,YAAY,CAAA;AACtC,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,SAAS,CAAA;AAC7C,OAAO,EAAE,YAAY,EAAE,gBAAgB,EAAE,MAAM,oBAAoB,CAAA;AACnE,MAAM,EAAE,KAAK,EAAE,GAAG,QAAQ,CAAA;AAE1B,MAAM,CAAC,MAAM,QAAQ,GACnB,CAAC,EAAsC,EAAE,EAAE,CAC3C,KAAK,EAAE,IAAY,EAAiB,EAAE;IACpC,IAAI,CAAC;QACH,OAAO,KAAK,CAAC,MAAM,YAAY,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;IAC5C,CAAC;IAAC,OAAO,EAAE,EAAE,CAAC;QACZ,IAAI,SAAS,CAAC,EAAE,CAAC,KAAK,OAAO,EAAE,CAAC;YAC9B,IACE,CAAC,CAAC,MAAM,YAAY,CAClB,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,EACnC,EAAE,CACH,CAAC,EACF,CAAC;gBACD,OAAM;YACR,CAAC;YACD,OAAO,KAAK,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,CAAC,CAAA;QAC9B,CAAC;QACD,MAAM,EAAE,CAAA;IACV,CAAC;AACH,CAAC,CAAA;AAEH,MAAM,CAAC,MAAM,YAAY,GACvB,CAAC,EAA6B,EAAE,EAAE,CAClC,CAAC,IAAY,EAAQ,EAAE;IACrB,IAAI,CAAC;QACH,OAAO,KAAK,gBAAgB,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAA;IAC9C,CAAC;IAAC,OAAO,EAAE,EAAE,CAAC;QACZ,IAAI,SAAS,CAAC,EAAE,CAAC,KAAK,OAAO,EAAE,CAAC;YAC9B,IAAI,CAAC,gBAAgB,CAAC,GAAG,EAAE,CAAC,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC;gBAChE,OAAM;YACR,CAAC;YACD,OAAO,KAAK,EAAE,CAAC,IAAI,CAAC,CAAA;QACtB,CAAC;QACD,MAAM,EAAE,CAAA;IACV,CAAC;AACH,CAAC,CAAA","sourcesContent":["import { errorCode } from './error.js'\nimport { chmodSync, promises } from './fs.js'\nimport { ignoreENOENT, ignoreENOENTSync } from './ignore-enoent.js'\nconst { chmod } = promises\n\nexport const fixEPERM =\n  (fn: (path: string) => Promise<unknown>) =>\n  async (path: string): Promise<void> => {\n    try {\n      return void (await ignoreENOENT(fn(path)))\n    } catch (er) {\n      if (errorCode(er) === 'EPERM') {\n        if (\n          !(await ignoreENOENT(\n            chmod(path, 0o666).then(() => true),\n            er,\n          ))\n        ) {\n          return\n        }\n        return void (await fn(path))\n      }\n      throw er\n    }\n  }\n\nexport const fixEPERMSync =\n  (fn: (path: string) => unknown) =>\n  (path: string): void => {\n    try {\n      return void ignoreENOENTSync(() => fn(path))\n    } catch (er) {\n      if (errorCode(er) === 'EPERM') {\n        if (!ignoreENOENTSync(() => (chmodSync(path, 0o666), true), er)) {\n          return\n        }\n        return void fn(path)\n      }\n      throw er\n    }\n  }\n"]}